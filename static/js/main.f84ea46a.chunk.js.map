{"version":3,"sources":["components/WeatherDetails.js","components/SearchMain.js","App.js","index.js"],"names":["WeatherDetails","_ref","temp","humidity","pressure","weatherType","name","speed","country","sunset","_useState","useState","_useState2","_slicedToArray","weatherState","setWeatherState","useEffect","date","Date","timeStr","concat","getHours","getMinutes","React","createElement","Fragment","className","toLocaleString","SearchMain","searchTerm","setSearchTerm","_useState3","_useState4","tempInfo","setTempInfo","getWeatherDetails","_asyncToGenerator","_regeneratorRuntime","mark","_callee","url","res","data","_data$main","_data$sys","wrap","_context","prev","next","fetch","sent","json","main","weather","wind","sys","t0","stop","apply","this","arguments","type","placeholder","id","value","onChange","e","target","onClick","App","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.f84ea46a.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\n\nfunction WeatherDetails({temp, humidity,\n  pressure,\n  weatherType,\n  name,\n  speed,\n  country,\n  sunset}) {\n\n    const [weatherState, setWeatherState] = useState(\"\");\n    useEffect(() => {\n      if (weatherType) {\n        switch (weatherType) {\n          case \"Clouds\":\n            setWeatherState(\"wi-day-cloudy\");\n            break;\n          case \"Haze\":\n            setWeatherState(\"wi-fog\");\n            break;\n          case \"Clear\":\n            setWeatherState(\"wi-day-sunny\");\n            break;\n          case \"Mist\":\n            setWeatherState(\"wi-dust\");\n            break;\n          case \"Rain\":\n            setWeatherState(\"wi-day-rain\");\n            break;\n  \n          default:\n            setWeatherState(\"wi-day-sunny\");\n            break;\n        }\n      }\n    }, [weatherType]);\n\n    let date = new Date(sunset * 1000);\n    let timeStr = `${date.getHours()}:${date.getMinutes()}`\n  return (\n    <>\n      <article className='widget'>\n          <div className='weatherIcon'>\n              <i className={`wi ${weatherState}`}>\n                  </i></div>\n                  <div className='weatherInfo'>\n                    <div className='temperature'>\n                      <span>{temp}&deg;</span>\n                    </div>\n                    <div className='description'>\n                      <div className='weatherCondition'>\n                        {weatherType}\n                      </div>\n                      <div className='place'>\n                        {name}, {country}\n                      </div>\n                    </div>\n                  </div>\n                  <div className='date'>{new Date().toLocaleString()}</div>\n                  <div className='extra-temp'>\n                    <div className='temp-info-minmax'>\n                      <div className='two-sided-section'>\n                        <p><i className='wi wi-sunset'></i></p>\n                        <p className='extra-info-leftside'>\n                          {timeStr} PM<br />\n                          sunset\n                        </p>\n                        </div>\n                      <div className='two-sided-section'>\n                        <p><i className='wi wi-humidity'></i></p>\n                        <p className='extra-info-leftside'>\n                          {humidity} <br />\n                          Humidity\n                        </p>\n                        </div>\n                      </div>\n                      <div className='temp-info-minmax'>\n                       <div className='two-sided-section'>\n                        <p><i className='wi wi-rain'></i></p>\n                        <p className='extra-info-leftside'>\n                          {pressure} <br />\n                          Pressure\n                        </p>\n                        </div>\n                      <div className='two-sided-section'>\n                        <p><i className='wi wi-strong-wind'></i></p>\n                        <p className='extra-info-leftside'>\n                          {speed} <br />\n                          Speed\n                        </p>\n                        </div>\n                      </div>\n                  </div>\n                  </article>  \n    </>\n  )\n}\n\nexport default WeatherDetails\n","import React, { useEffect, useState } from 'react'\nimport '../style/style.css'\nimport WeatherDetails from './WeatherDetails'\n\nfunction SearchMain() {\n    const [searchTerm, setSearchTerm] = useState('mumbai')\n    const [tempInfo, setTempInfo] = useState({})\n\n    const getWeatherDetails  = async() => {\n      try {\n        let url =`https://api.openweathermap.org/data/2.5/weather?q=${searchTerm}&units=metric&appid=edfbb71f85e1fcfb2f25c50ebd685682`\n        let res = await fetch(url);\n        let data = await res.json();\n        const {temp, humidity, pressure} = data.main;\n        const {main: weatherType} = data.weather[0];\n        const {name} = data;\n        const {speed} = data.wind;\n        const{country, sunset} = data.sys;\n\n        const myNewWeatherInfo = {\n          temp,\n          humidity,\n          pressure,\n          weatherType,\n          name,\n          speed,\n          country,\n          sunset\n        }\n\n        setTempInfo(myNewWeatherInfo)\n\n        //console.log(data)\n      } catch (error) {\n        //console.log(error)\n      }\n\n    }\n\nuseEffect(() =>{\n  getWeatherDetails()\n}, [])\n\n  return (\n   <> <div className='wrap'>\n      <div className='search'>\n          <input type='search' placeholder='type city' id='search' value={searchTerm} onChange={(e) => setSearchTerm(e.target.value)}/>\n      <button className='searchButton' onClick={getWeatherDetails}>Search</button>\n      </div>\n    </div>\n    <WeatherDetails {...tempInfo} /></>\n  )\n}\n\nexport default SearchMain\n","\nimport React from 'react'\nimport './App.css';\nimport SearchMain from './components/SearchMain';\n\n\nexport default function App() {\n  return (\n    <div className='App'>\n    <SearchMain/>\n    </div>\n  )\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n\n"],"sourceRoot":""}